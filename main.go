package main

import (
	"flag"
	"fmt"
	"sync"

	"github.com/FoundationDB/fdb-go/fdb"
	"github.com/FoundationDB/fdb-go/fdb/subspace"
	"github.com/FoundationDB/fdb-go/fdb/tuple"
	"github.com/golang/glog"
)

var (
	globalspace = subspace.Sub("global")

	writers = flag.Int("writers", 8, "the number of concurrent writer loops to fdb")
)

func main() {
	flag.Parse()

	var work sync.WaitGroup

	fdb.MustAPIVersion(300)
	db := fdb.MustOpenDefault()

	glog.Info("started")

	values := make(chan [][]byte)

	go func() {
		defer close(values)

		for i := 0; i < 1000; i++ {
			values <- [][]byte{
				[]byte("55016240139541825831248235590928388050342796869467125714573772729983527548255642386370229015656387150848807487151339461263449466723879128964904436408494889996394069979929819274982353154433671964674699212887561015326410385441664236925959164219332147778332925795309157503386333233233354364896239995422994795249191515403481140936553663279757290416787757496552237116627244982955104539916919213038155680710328503796426173973700453821840362580703647190956630678410710125906454173642027827141851167868952548"),
				[]byte("55016240139541825831248235590928388050342796869467125714573772729983527548255642386370229015656387150848807487151339461263449466723879128964904436408494889996394069979929819274982353154433671964674699212887561015326410385441664236925959164219332147778332925795309157503386333233233354364896239995422994795249191515403481140936553663279757290416787757496552237116627244982955104539916919213038155680710328503796426173973700453821840362580703647190956630678410710125906454173642027827141851167868952548"),
				[]byte("55016240139541825831248235590928388050342796869467125714573772729983527548255642386370229015656387150848807487151339461263449466723879128964904436408494889996394069979929819274982353154433671964674699212887561015326410385441664236925959164219332147778332925795309157503386333233233354364896239995422994795249191515403481140936553663279757290416787757496552237116627244982955104539916919213038155680710328503796426173973700453821840362580703647190956630678410710125906454173642027827141851167868952548"),
				[]byte("55016240139541825831248235590928388050342796869467125714573772729983527548255642386370229015656387150848807487151339461263449466723879128964904436408494889996394069979929819274982353154433671964674699212887561015326410385441664236925959164219332147778332925795309157503386333233233354364896239995422994795249191515403481140936553663279757290416787757496552237116627244982955104539916919213038155680710328503796426173973700453821840362580703647190956630678410710125906454173642027827141851167868952548"),
				[]byte("55016240139541825831248235590928388050342796869467125714573772729983527548255642386370229015656387150848807487151339461263449466723879128964904436408494889996394069979929819274982353154433671964674699212887561015326410385441664236925959164219332147778332925795309157503386333233233354364896239995422994795249191515403481140936553663279757290416787757496552237116627244982955104539916919213038155680710328503796426173973700453821840362580703647190956630678410710125906454173642027827141851167868952548"),
				[]byte("55016240139541825831248235590928388050342796869467125714573772729983527548255642386370229015656387150848807487151339461263449466723879128964904436408494889996394069979929819274982353154433671964674699212887561015326410385441664236925959164219332147778332925795309157503386333233233354364896239995422994795249191515403481140936553663279757290416787757496552237116627244982955104539916919213038155680710328503796426173973700453821840362580703647190956630678410710125906454173642027827141851167868952548"),
				[]byte("55016240139541825831248235590928388050342796869467125714573772729983527548255642386370229015656387150848807487151339461263449466723879128964904436408494889996394069979929819274982353154433671964674699212887561015326410385441664236925959164219332147778332925795309157503386333233233354364896239995422994795249191515403481140936553663279757290416787757496552237116627244982955104539916919213038155680710328503796426173973700453821840362580703647190956630678410710125906454173642027827141851167868952548"),
				[]byte("55016240139541825831248235590928388050342796869467125714573772729983527548255642386370229015656387150848807487151339461263449466723879128964904436408494889996394069979929819274982353154433671964674699212887561015326410385441664236925959164219332147778332925795309157503386333233233354364896239995422994795249191515403481140936553663279757290416787757496552237116627244982955104539916919213038155680710328503796426173973700453821840362580703647190956630678410710125906454173642027827141851167868952548"),
				[]byte("55016240139541825831248235590928388050342796869467125714573772729983527548255642386370229015656387150848807487151339461263449466723879128964904436408494889996394069979929819274982353154433671964674699212887561015326410385441664236925959164219332147778332925795309157503386333233233354364896239995422994795249191515403481140936553663279757290416787757496552237116627244982955104539916919213038155680710328503796426173973700453821840362580703647190956630678410710125906454173642027827141851167868952548"),
				[]byte("55016240139541825831248235590928388050342796869467125714573772729983527548255642386370229015656387150848807487151339461263449466723879128964904436408494889996394069979929819274982353154433671964674699212887561015326410385441664236925959164219332147778332925795309157503386333233233354364896239995422994795249191515403481140936553663279757290416787757496552237116627244982955104539916919213038155680710328503796426173973700453821840362580703647190956630678410710125906454173642027827141851167868952548"),
			}
		}
	}()

	for i := 0; i < *writers; i++ {
		work.Add(1)
		go func(localId int) {
			writer(db, localId, values)
			work.Done()
		}(i)
	}

	work.Wait()
}

func writer(db fdb.Database, localId int, values chan [][]byte) {
	var success, failed, sequence int

	for batch := range values {
		transaction, err := db.CreateTransaction()

		if err != nil {
			panic(err)
		}

		for _, value := range batch {
			key := globalspace.Pack(tuple.Tuple{
				localId,
				sequence,
			})

			transaction.Set(key, value)
			sequence++

			if glog.V(2) {
				glog.Infof("%v: %v", localId, keyToString(key))
			}
		}

		if err := transaction.Commit().Get(); err != nil {
			if glog.V(1) {
				glog.Infof("failed to commit transaction from %v: %+v", localId, err)
			}

			failed++
		} else {
			success++
		}
	}

	glog.Infof("%v: finished, %v transactions succeeded, %v transactions failed", localId, success, failed)
}

// returns key in human readable format
func keyToString(key fdb.Key) string {
	unpacked, err := tuple.Unpack(key)

	if err != nil {
		return fmt.Sprintf("invalid key: %v", err.Error())
	}

	var s string

	for index, element := range unpacked {
		if index == 0 {
			s = fmt.Sprintf("%v", element)
		} else {
			s += fmt.Sprintf(",%v", element)
		}
	}

	return s
}
